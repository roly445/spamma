@page "/admin/subdomains"
@page "/admin/domains/{domainId:guid}/subdomains/"
@using Spamma.App.Client.Components.UserControls
@using Spamma.App.Client.Components.UserControls.Subdomain
@using Spamma.App.Client.Layout
@using Spamma.Modules.DomainManagement.Client.Application.Queries
@using Spamma.Modules.DomainManagement.Client.Contracts
@layout AppLayout

@attribute [Authorize]


<PageTitle>Subdomain Management - Spamma Admin</PageTitle>

<div class="@(IsUsedAsComponent ? "" : "min-h-screen bg-gray-50")">
                                                      <!-- Header -->
                                                      @if (!IsUsedAsComponent)

    {
        <div class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="py-6">
                    <div class="flex items-center justify-between">
                        <div>
                            <h1 class="text-2xl font-bold text-gray-900">Subdomain Management</h1>
                            <p class="mt-1 text-sm text-gray-500">Manage subdomains, email recipients, chaos monkey rules, and campaigns</p>
                        </div>
                        <div class="flex items-center space-x-3">
                            <button class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                                    @onclick="OpenAddSubdomainModal">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Subdomain
                            </button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


    <!-- Main Content -->
    <div class="max-w-7xl mx-auto @(IsUsedAsComponent ? "" : "px-4 sm:px-6 lg:px-8 py-8")">
        <!-- Filters and Search -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
            <EditForm Model="@searchRequest" OnSubmit="@HandleSearch" FormName="SubdomainSearchForm">
                <div class="grid grid-cols-1 @(DomainId == null ? "md:grid-cols-5" : "md:grid-cols-4") gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                        <InputText @bind-Value="searchRequest.SearchTerm" 
                                   placeholder="Search by subdomain or description..." 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <InputSelect @bind-Value="searchRequest.Status" 
                                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">All Statuses</option>
                            <option value="@SubdomainStatus.Active">Active</option>
                            <option value="@SubdomainStatus.Inactive">Inactive</option>
                            <option value="@SubdomainStatus.Suspended">Suspended</option>
                        </InputSelect>
                    </div>
                    @if (DomainId == null)
                    {
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Parent Domain</label>
                            <InputSelect @bind-Value="searchRequest.ParentDomainId"
                                         class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">All Domains</option>
                                @if (availableDomains != null)
                                {
                                    @foreach (var domain in availableDomains)
                                    {
                                        <option value="@domain.Id">@domain.DomainName</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    }
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                        <InputSelect @bind-Value="searchRequest.SortBy" 
                                     class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="CreatedAt" selected>Created Date</option>
                            <option value="SubdomainName">Subdomain Name</option>
                            <option value="ParentDomainName">Parent Domain</option>
                            <option value="Status">Status</option>
                            <option value="EmailRecipientCount">Recipients</option>
                        </InputSelect>
                    </div>
                    <div class="flex items-end">
                        <button type="submit" 
                                class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            Search
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>

        @if (!IsUsedAsComponent)
        {
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div class="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Total Subdomains</dt>
                                    <dd class="text-lg font-medium text-gray-900">@(pagedResult?.TotalCount ?? 0)</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white overflow-hidden shadow-sm rounded-lg border border-gray-200">
                    <div class="p-5">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="ml-5 w-0 flex-1">
                                <dl>
                                    <dt class="text-sm font-medium text-gray-500 truncate">Active</dt>
                                    <dd class="text-lg font-medium text-gray-900">@(pagedResult?.Items.Count(s => s.Status == SubdomainStatus.Active) ?? 0)</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        }

        <!-- Subdomains Table -->
        <div class="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
            @if (!IsUsedAsComponent)
            {
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-medium text-gray-900">Subdomains</h3>
                </div>
            }
            @if (isLoading)
            {
                <div class="flex items-center justify-center py-12">
                    <svg class="animate-spin h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
            }
            else if (pagedResult?.Items.Any() == true)
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subdomain</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                            <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var subdomain in pagedResult.Items)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="h-10 w-10 bg-gradient-to-br from-green-400 to-green-600 rounded-lg flex items-center justify-center">
                                            <svg class="h-5 w-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                            </svg>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">@subdomain.FullDomainName</div>
                                            <div class="text-sm text-gray-500">@(subdomain.Description ?? "No description")</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="@GetStatusClasses(subdomain.Status)">
                                        @GetStatusText(subdomain.Status)
                                    </span>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    @subdomain.CreatedAt.ToString("MMM dd, yyyy")
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end space-x-2">
                                        <button @onclick="() => NavigateToSubdomainDetails(subdomain.Id)"
                                                class="text-blue-600 hover:text-blue-900">View</button>

                                        <button @onclick="() => OpenEditSubdomain(subdomain)"
                                                class="text-indigo-600 hover:text-indigo-900">Edit</button>

                                        @if (subdomain.Status != SubdomainStatus.Suspended)
                                        {
                                            <button @onclick="() => OpenSuspendSubdomain(subdomain)"
                                                    class="text-red-600 hover:text-red-900">Suspend</button>
                                        }
                                        else
                                        {
                                            <button @onclick="() => OpenUnsuspendSubdomain(subdomain)"
                                                    class="text-green-600 hover:text-green-900">Unsuspend</button>
                                        }
                                    </div>
                                </td>

                            </tr>
                        }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination (same as previous examples) -->
                @if (pagedResult.TotalPages > 1)
                {
                    <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                        <div class="flex-1 flex justify-between sm:hidden">
                            <button @onclick="() => GoToPage(pagedResult.Page - 1)"
                                    disabled="@(pagedResult.Page <= 1)"
                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                Previous
                            </button>
                            <button @onclick="() => GoToPage(pagedResult.Page + 1)"
                                    disabled="@(pagedResult.Page >= pagedResult.TotalPages)"
                                    class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                Next
                            </button>
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Showing <span class="font-medium">@((pagedResult.Page - 1) * pagedResult.PageSize + 1)</span>
                                    to <span class="font-medium">@Math.Min(pagedResult.Page * pagedResult.PageSize, pagedResult.TotalCount)</span>
                                    of <span class="font-medium">@pagedResult.TotalCount</span> results
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    <button @onclick="() => GoToPage(pagedResult.Page - 1)"
                                            disabled="@(pagedResult.Page <= 1)"
                                            class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"/>
                                        </svg>
                                    </button>

                                    @for (int i = Math.Max(1, pagedResult.Page - 2); i <= Math.Min(pagedResult.TotalPages, pagedResult.Page + 2); i++)
                                    {
                                        int pageCount = i;
                                        <button @onclick="() => GoToPage(pageCount)"
                                                class="@(pageCount == pagedResult.Page
                                                           ? "bg-blue-50 border-blue-500 text-blue-600 relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                                           : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium")">
                                            @pageCount
                                        </button>
                                    }

                                    <button @onclick="() => GoToPage(pagedResult.Page + 1)"
                                            disabled="@(pagedResult.Page >= pagedResult.TotalPages)"
                                            class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"/>
                                        </svg>
                                    </button>
                                </nav>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No subdomains found</h3>
                    <p class="mt-1 text-sm text-gray-500">Try adjusting your search filters.</p>
                </div>
            }
        </div>
    </div>
</div>



<!-- Suspend Subdomain Modal -->
<SuspendSubdomain @ref="_suspendSubdomain" OnSuspended="HandleSubdomainSuspended"/>
<UnsuspendSubdomain @ref="_unsuspendSubdomain" OnUnsuspended="HandleSubdomainUnsuspended"/>
<AddSubdomain @ref="addSubdomain" OnSubdomainCreated="HandleSubdomainCreated" />
<EditSubdomain @ref="_editSubdomain" OnSaved="HandleSubdomainUpdated" />
