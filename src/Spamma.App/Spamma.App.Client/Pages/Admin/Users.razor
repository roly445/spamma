@page "/admin/users"
@using Spamma.App.Client.Components.UserControls
@using Spamma.App.Client.Infrastructure.Helpers
@using Spamma.App.Client.Layout
@using Spamma.Modules.UserManagement.Client.Contracts
@layout AppLayout
@attribute [Authorize(Policy = "UserAdministration")]

<PageTitle>User Management - Spamma Admin</PageTitle>

<div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b border-gray-200">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="py-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-2xl font-bold text-gray-900">User Management</h1>
                        <p class="mt-1 text-sm text-gray-500">Manage and monitor user accounts</p>
                    </div>
                    <div class="flex items-center space-x-3">
                        <button @onclick="OpenAddUserModal" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            <svg class="w-4 h-4 mr-2 fill-none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                            </svg>
                            Add User
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Filters and Search -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-6">
            <EditForm Model="@_searchRequest" OnSubmit="@HandleSearch" FormName="UserSearchForm">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
                        <InputText @bind-Value="_searchRequest.SearchTerm" 
                                  placeholder="Search by email or name..." 
                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                        <InputSelect @bind-Value="_searchRequest.Status" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">All Statuses</option>
                            <option value="@UserStatus.Active">Active</option>
                            <option value="@UserStatus.Inactive">Inactive</option>
                            <option value="@UserStatus.Suspended">Suspended</option>
                        </InputSelect>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                        <InputSelect @bind-Value="_searchRequest.SortBy" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="CreatedAt">Created Date</option>
                            <option value="Email">Email</option>
                            <option value="DisplayName">Display Name</option>
                            <option value="LastLoginAt">Last Login</option>
                            <option value="Status">Status</option>
                        </InputSelect>
                    </div>
                    <div class="flex items-end">
                        <button type="submit" 
                               class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            Search
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <StatCard IconClass="bg-green-100" Title="Total" Value="@(userStats == null ? "-" : userStats.TotalUsers.ToString())">
                <svg class="w-5 h-5 text-green-600 fill-none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
            </StatCard>
            
            <StatCard IconClass="bg-blue-100" Title="Active" Value="@(userStats == null ? "-" : userStats.ActiveUsers.ToString())">
                <svg class="w-5 h-5 text-blue-600 fill-none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
            </StatCard>

            <StatCard IconClass="bg-red-100" Title="Suspended" Value="@(userStats == null ? "-" : userStats.SuspendedUsers.ToString())">
                <svg class="w-5 h-5 text-red-600 fill-none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18 21l-2.636-2.636M5.636 5.636L3 3l2.636 2.636"></path>
                </svg>
            </StatCard>
        </div>


        <!-- Users Table -->
        <div class="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Users</h3>
            </div>
            
            @if (isLoading)
            {
                <div class="flex items-center justify-center py-12">
                    <svg class="animate-spin h-8 w-8 text-blue-600 fill-none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
            }
            else if (pagedResult.Items.Any())
            {
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Login</th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var user in pagedResult.Items)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="h-10 w-10 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                                                <span class="text-sm font-medium text-white">
                                                    @(user.DisplayName?.Substring(0, 1).ToUpper() ?? user.Email.Substring(0, 1).ToUpper())
                                                </span>
                                            </div>
                                            <div class="ml-4">
                                                <div class="text-sm font-medium text-gray-900">@(user.DisplayName ?? "No Name")</div>
                                                <div class="text-sm text-gray-500 flex items-center">
                                                    @user.Email
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="@GetStatusClasses(user.Status)">
                                            @GetStatusText(user.Status)
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @user.CreatedAt.ToString("MMM dd, yyyy")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @(user.LastLoginAt?.ToString("MMM dd, yyyy") ?? "Never")
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div class="flex items-center justify-end space-x-2">
                                            @if (!user.IsReadOnly)
                                            {
                                                <button @onclick="() => OpenEditUser(user)" class="text-blue-600 hover:text-blue-900">Edit</button>
                                                <button @onclick="() => OpenManagePasskeysModal(user)" class="text-purple-600 hover:text-purple-900">Passkeys</button>
                                                @if (user.Status != UserStatus.Suspended)
                                                {
                                                    <button @onclick="() => OpenSuspendUser(user)" class="text-red-600 hover:text-red-900">Suspend</button>
                                                }
                                                else
                                                {
                                                    <button @onclick="() => OpenUnsuspendUser(user)" class="text-green-600 hover:text-green-900">Unsuspend</button>
                                                }
                                            }
                                        </div>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (pagedResult.TotalPages > 1)
                {
                    <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                        <div class="flex-1 flex justify-between sm:hidden">
                            <button @onclick="() => GoToPage(pagedResult.Page - 1)" 
                                   disabled="@(pagedResult.Page <= 1)"
                                   class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                Previous
                            </button>
                            <button @onclick="() => GoToPage(pagedResult.Page + 1)" 
                                   disabled="@(pagedResult.Page >= pagedResult.TotalPages)"
                                   class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                Next
                            </button>
                        </div>
                        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                            <div>
                                <p class="text-sm text-gray-700">
                                    Showing <span class="font-medium">@((pagedResult.Page - 1) * pagedResult.PageSize + 1)</span>
                                    to <span class="font-medium">@Math.Min(pagedResult.Page * pagedResult.PageSize, pagedResult.TotalCount)</span>
                                    of <span class="font-medium">@pagedResult.TotalCount</span> results
                                </p>
                            </div>
                            <div>
                                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                    <button @onclick="() => GoToPage(pagedResult.Page - 1)" 
                                           disabled="@(pagedResult.Page <= 1)"
                                           class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                    
                                    @for (int i = Math.Max(1, pagedResult.Page - 2); i <= Math.Min(pagedResult.TotalPages, pagedResult.Page + 2); i++)
                                    {
                                        int pageCount = i;
                                        <button @onclick="() => GoToPage(pageCount)" 
                                               class="@(pageCount == pagedResult.Page 
                                                   ? "bg-blue-50 border-blue-500 text-blue-600 relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                                   : "bg-white border-gray-300 text-gray-500 hover:bg-gray-50 relative inline-flex items-center px-4 py-2 border text-sm font-medium")">
                                            @pageCount
                                        </button>
                                    }
                                    
                                    <button @onclick="() => GoToPage(pagedResult.Page + 1)" 
                                           disabled="@(pagedResult.Page >= pagedResult.TotalPages)"
                                           class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                        <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </nav>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-12">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No users found</h3>
                    <p class="mt-1 text-sm text-gray-500">Try adjusting your search filters.</p>
                </div>
            }
        </div>
</div>
</div>

<!-- Edit User Slide-out Panel -->
@if (showEditPanel && selectedUser != null)
{
    <div class="fixed inset-0 overflow-hidden z-50" @onclick="CloseEditPanel">
        <div class="absolute inset-0 overflow-hidden">
            <!-- Background overlay -->
            <div class="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
            
            <!-- Panel -->
            <div class="fixed inset-y-0 right-0 pl-10 max-w-full flex" @onclick:stopPropagation="true">
                <div class="w-screen max-w-md">
                    <div class="h-full flex flex-col py-6 bg-white shadow-xl overflow-y-scroll">
                        <!-- Header -->
                        <div class="px-4 sm:px-6">
                            <div class="flex items-center justify-between">
                                <h2 class="text-lg font-medium text-gray-900">Edit User</h2>
                                <button @onclick="CloseEditPanel" class="rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <svg class="h-6 w-6 fill-none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                        </div>
                        
                        <!-- Content -->
                        <div class="mt-6 relative flex-1 px-4 sm:px-6">
                            <!-- User Avatar and Basic Info -->
                            <div class="text-center mb-6">
                                <div class="mx-auto h-20 w-20 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                                    <span class="text-xl font-medium text-white">
                                        @(selectedUser.DisplayName?.Substring(0, 1).ToUpper() ?? selectedUser.Email.Substring(0, 1).ToUpper())
                                    </span>
                                </div>
                                <h3 class="mt-2 text-lg font-medium text-gray-900">@(selectedUser.DisplayName ?? "No Name")</h3>
                                <p class="text-sm text-gray-500">@selectedUser.Email</p>
                            </div>

                            <!-- Edit Form -->
                            <EditForm Model="@_editUserModel" OnValidSubmit="@HandleSaveUser" FormName="EditUserForm">
                                <DataAnnotationsValidator />
                                
                                <!-- Basic Information -->
                                <div class="space-y-6">
                                    <div>
                                        <h4 class="text-sm font-medium text-gray-900 mb-3">Basic Information</h4>
                                        
                                        <div class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Display Name</label>
                                                <InputText @bind-Value="_editUserModel.DisplayName" 
                                                          class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                                                <ValidationMessage For="@(() => _editUserModel.DisplayName)" class="mt-1 text-sm text-red-600" />
                                            </div>

                                            <div>
                                                <label class="block text-sm font-medium text-gray-700">Email Address</label>
                                                <InputText @bind-Value="_editUserModel.Email" 
                                                           class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                                                <ValidationMessage For="@(() => _editUserModel.Email)" class="mt-1 text-sm text-red-600" />
                                            </div>
                                            
                                            <div>
                                                <h4 class="text-sm font-medium text-gray-900 mb-2">Roles</h4>
                                                <div class="space-y-2">
                                                    @foreach (SystemRole role in Enum.GetValues(typeof(SystemRole)))
                                                    {
                                                        <div class="flex items-center">
                                                            <input type="checkbox"
                                                                   checked="@IsRoleSelected(role, _editUserModel.Roles)"
                                                                   @onchange="(e) => ToggleRole(role, _editUserModel, e.Value ?? false)"
                                                                   class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                                            <label class="ml-2 text-sm text-gray-700">@role.GetDescription()</label>
                                                        </div>
                                                    }
                                                </div>
                                            </div>

                                            
                                        </div>
                                    </div>

                                    <!-- Account Details -->
                                    <div>
                                        <h4 class="text-sm font-medium text-gray-900 mb-3">Account Details</h4>
                                        <div class="bg-gray-50 rounded-lg p-4 space-y-3">
                                            <div class="flex justify-between">
                                                <span class="text-sm text-gray-500">Account Created</span>
                                                <span class="text-sm text-gray-900">@selectedUser.CreatedAt.ToString("MMM dd, yyyy 'at' h:mm tt")</span>
                                            </div>
                                            <div class="flex justify-between">
                                                <span class="text-sm text-gray-500">Last Login</span>
                                                <span class="text-sm text-gray-900">@(selectedUser.LastLoginAt?.ToString("MMM dd, yyyy 'at' h:mm tt") ?? "Never")</span>
                                            </div>
                                           
                                        </div>
                                    </div>


                                </div>

                                <!-- Form Actions -->
                                <div class="mt-6 flex justify-end space-x-3">
                                    <button type="button" @onclick="CloseEditPanel" 
                                           class="bg-white py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                        Cancel
                                    </button>
                                    <button type="submit" 
                                           class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                        @if (isSavingUser)
                                        {
                                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                            </svg>
                                            <span>Saving...</span>
                                        }
                                        else
                                        {
                                            <span>Save Changes</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (showAddUserModal)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity z-50 flex items-center justify-center p-4" @onclick="CloseAddUserModal">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full max-h-screen overflow-y-auto" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h3 class="text-lg font-medium text-gray-900">Add New User</h3>
                    <button @onclick="CloseAddUserModal" class="text-gray-400 hover:text-gray-500 focus:outline-none focus:text-gray-500">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="px-6 py-4">
                <EditForm Model="@_addUserModel" OnValidSubmit="@HandleAddUser" FormName="AddUserForm">
                    <DataAnnotationsValidator />

                    <div class="space-y-4">
                        <!-- Email Address (Primary Field) -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">
                                Email Address <span class="text-red-500">*</span>
                            </label>
                            <InputText @bind-Value="_addUserModel.Email" 
                                      placeholder="user@example.com"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                            <ValidationMessage For="@(() => _addUserModel.Email)" class="mt-1 text-sm text-red-600" />
                        </div>

                        <!-- Display Name -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Display Name</label>
                            <InputText @bind-Value="_addUserModel.DisplayName" 
                                      placeholder="John Doe"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" />
                            <ValidationMessage For="@(() => _addUserModel.DisplayName)" class="mt-1 text-sm text-red-600" />
                        </div>

                        @* Role Selection *@
                        <div>
                            <h4 class="text-sm font-medium text-gray-900 mb-2">Roles</h4>
                            <div class="space-y-2">
                                @foreach (SystemRole role in Enum.GetValues(typeof(SystemRole)))
                                {
                                    <div class="flex items-center">
                                        <input type="checkbox"
                                               checked="@IsRoleSelected(role, _addUserModel.Roles)"
                                               @onchange="(e) => ToggleRole(role, _addUserModel, e.Value ?? false)"
                                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                        <label class="ml-2 text-sm text-gray-700">@role.GetDescription()</label>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Send Invitation Option -->
                        <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                </div>
                                <div class="ml-3 flex-1 md:flex md:justify-between">
                                    <div class="flex items-center">
                                        <InputCheckbox @bind-Value="_addUserModel.SendWelcome" 
                                                      class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                                        <label class="ml-2 text-sm text-blue-700">
                                            Send invitation email to user
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <p class="mt-2 text-xs text-blue-600">
                                The user will receive an email with instructions to access their account.
                            </p>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="mt-6 flex justify-end space-x-3">
                        <button type="button" @onclick="CloseAddUserModal" 
                               class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Cancel
                        </button>
                        <button type="submit" 
                               disabled="@isAddingUser"
                               class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isAddingUser)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Adding User...</span>
                            }
                            else
                            {
                                <span>Add User</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@if (showSuspendModal && userToSuspend != null)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity z-50 flex items-center justify-center p-4" @onclick="CloseSuspendModal">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                        <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18 21l-2.636-2.636M5.636 5.636L3 3l2.636 2.636"></path>
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left flex-1">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Suspend User</h3>
                    </div>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="px-6 py-4">
                <div class="mb-4">
                    <p class="text-sm text-gray-500 mb-2">You are about to suspend:</p>
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                        <div class="h-8 w-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                            <span class="text-xs font-medium text-white">
                                @(userToSuspend.DisplayName?.Substring(0, 1).ToUpper() ?? userToSuspend.Email.Substring(0, 1).ToUpper())
                            </span>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-gray-900">@(userToSuspend.DisplayName ?? "No Name")</p>
                            <p class="text-sm text-gray-500">@userToSuspend.Email</p>
                        </div>
                    </div>
                </div>

                <EditForm Model="@suspendUserModel" OnValidSubmit="@HandleSuspendUser" FormName="SuspendUserForm">
                    <DataAnnotationsValidator />

                    <!-- Suspension Reason -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Reason for Suspension <span class="text-red-500">*</span>
                        </label>
                        <InputSelect @bind-Value="suspendUserModel.Reason" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 sm:text-sm">
                            <option value="@AccountSuspensionReason.Unknown">Select a reason...</option>
                            <option value="@AccountSuspensionReason.PolicyViolation">Policy Violation</option>
                            <option value="@AccountSuspensionReason.SpamAbuse">Spam/Abuse</option>
                            <option value="@AccountSuspensionReason.SecurityConcern">Security Concern</option>
                            <option value="@AccountSuspensionReason.RequestedByUser">Requested by User</option>
                            <option value="@AccountSuspensionReason.Administrative">Administrative</option>
                            <option value="@AccountSuspensionReason.Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => suspendUserModel.Reason)" class="mt-1 text-sm text-red-600" />
                    </div>

                    <!-- Additional Notes -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Additional Notes</label>
                        <InputTextArea @bind-Value="suspendUserModel.Notes" 
                                      rows="3" 
                                      placeholder="Optional: Additional details about the suspension..."
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500 sm:text-sm" />
                    </div>

                    <!-- Warning Box -->
                    <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.966-.833-2.736 0L3.077 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                </svg>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-red-800">This action will:</h3>
                                <div class="mt-2 text-sm text-red-700">
                                    <ul class="list-disc list-inside space-y-1">
                                        <li>Immediately prevent user from logging in</li>
                                        <li>Block access to all system features</li>
                                        <li>Send a suspension notification email</li>
                                        <li>Create an audit log entry</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="flex justify-end space-x-3">
                        <button type="button" @onclick="CloseSuspendModal" 
                               class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Cancel
                        </button>
                        <button type="submit" 
                               disabled="@isSuspendingUser"
                               class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed">
                            @if (isSuspendingUser)
                            {
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                <span>Suspending...</span>
                            }
                            else
                            {
                                <span>Suspend User</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- Unsuspend User Confirmation Modal -->
@if (showUnsuspendModal && userToUnsuspend != null)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity z-50 flex items-center justify-center p-4" @onclick="CloseUnsuspendModal">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="px-6 py-4 border-b border-gray-200">
                <div class="flex items-center">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100">
                        <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left flex-1">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Unsuspend User</h3>
                    </div>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="px-6 py-4">
                <div class="mb-4">
                    <p class="text-sm text-gray-500 mb-2">You are about to restore access for:</p>
                    <div class="flex items-center p-3 bg-gray-50 rounded-lg">
                        <div class="h-8 w-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
                            <span class="text-xs font-medium text-white">
                                @(userToUnsuspend.DisplayName?.Substring(0, 1).ToUpper() ?? userToUnsuspend.Email.Substring(0, 1).ToUpper())
                            </span>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium text-gray-900">@(userToUnsuspend.DisplayName ?? "No Name")</p>
                            <p class="text-sm text-gray-500">@userToUnsuspend.Email</p>
                        </div>
                    </div>
                </div>

                <!-- Info Box -->
                <div class="bg-green-50 border border-green-200 rounded-md p-4 mb-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-green-800">This action will:</h3>
                            <div class="mt-2 text-sm text-green-700">
                                <ul class="list-disc list-inside space-y-1">
                                    <li>Restore user's login access</li>
                                    <li>Re-enable all system features</li>
                                    <li>Send an account restored notification</li>
                                    <li>Create an audit log entry</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="flex justify-end space-x-3">
                    <button type="button" @onclick="CloseUnsuspendModal" 
                           class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    <button type="button" @onclick="HandleUnsuspendUser"
                           disabled="@isUnsuspendingUser"
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        @if (isUnsuspendingUser)
                        {
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Restoring Access...</span>
                        }
                        else
                        {
                            <span>Unsuspend User</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Manage Passkeys Modal -->
@if (showPasskeysModal && selectedUserForPasskeys != null)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity z-50 flex items-center justify-center p-4" @onclick="ClosePasskeysModal">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-96 overflow-y-auto" @onclick:stopPropagation="true">
            <!-- Modal Header -->
            <div class="sticky top-0 px-6 py-4 border-b border-gray-200 bg-white">
                <div class="flex items-center justify-between">
                    <div>
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Manage Passkeys</h3>
                        <p class="mt-1 text-sm text-gray-500">
                            User: <span class="font-medium">@(selectedUserForPasskeys.DisplayName ?? selectedUserForPasskeys.Email)</span>
                        </p>
                    </div>
                    <button @onclick="ClosePasskeysModal" class="rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <svg class="h-6 w-6 fill-none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Modal Body -->
            <div class="px-6 py-4">
                @if (isLoadingPasskeys)
                {
                    <div class="flex items-center justify-center py-8">
                        <svg class="animate-spin h-8 w-8 text-blue-600 fill-none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </div>
                }
                else if (userPasskeys.Count == 0)
                {
                    <div class="text-center py-8">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No passkeys</h3>
                        <p class="mt-1 text-sm text-gray-500">This user hasn't registered any passkeys yet.</p>
                    </div>
                }
                else
                {
                    <div class="space-y-3">
                        <!-- Select All Checkbox -->
                        <div class="flex items-center p-3 bg-gray-50 rounded-lg border border-gray-200">
                            <input type="checkbox" 
                                   @onchange="@(_ => ToggleSelectAll())"
                                   checked="@(selectedPasskeyIds.Count == userPasskeys.Count(p => !p.IsRevoked) && userPasskeys.Any(p => !p.IsRevoked && selectedPasskeyIds.Contains(p.Id)))"
                                   class="h-4 w-4 text-blue-600 rounded focus:ring-blue-500 border-gray-300" />
                            <span class="ml-3 text-sm font-medium text-gray-700">Select All Active Passkeys</span>
                        </div>

                        <!-- Passkeys List -->
                        <div class="space-y-2 max-h-64 overflow-y-auto">
                            @foreach (var passkey in userPasskeys)
                            {
                                <div class="flex items-start p-3 bg-gray-50 rounded-lg border @(passkey.IsRevoked ? "border-red-200 opacity-60" : "border-gray-200")">
                                    @if (!passkey.IsRevoked)
                                    {
                                        <input type="checkbox" 
                                               @onchange="@(_ => TogglePasskeySelection(passkey.Id))"
                                               checked="@selectedPasskeyIds.Contains(passkey.Id)"
                                               class="h-4 w-4 text-blue-600 rounded focus:ring-blue-500 border-gray-300 mt-1" />
                                    }
                                    else
                                    {
                                        <div class="h-4 w-4 mt-1"></div>
                                    }
                                    
                                    <div class="ml-3 flex-1">
                                        <div class="flex items-center justify-between">
                                            <p class="text-sm font-medium text-gray-900">@passkey.DisplayName</p>
                                            @if (passkey.IsRevoked)
                                            {
                                                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">Revoked</span>
                                            }
                                        </div>
                                        <div class="mt-1 text-xs text-gray-500 space-y-1">
                                            <p><strong>Algorithm:</strong> @passkey.Algorithm</p>
                                            <p><strong>Registered:</strong> @passkey.RegisteredAt.ToString("MMM dd, yyyy HH:mm")</p>
                                            @if (passkey.LastUsedAt.HasValue)
                                            {
                                                <p><strong>Last Used:</strong> @passkey.LastUsedAt.Value.ToString("MMM dd, yyyy HH:mm")</p>
                                            }
                                            else
                                            {
                                                <p><strong>Last Used:</strong> Never</p>
                                            }
                                            @if (passkey.RevokedAt.HasValue)
                                            {
                                                <p><strong>Revoked:</strong> @passkey.RevokedAt.Value.ToString("MMM dd, yyyy HH:mm")</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Modal Footer -->
            @if (userPasskeys.Count > 0)
            {
                <div class="sticky bottom-0 px-6 py-4 border-t border-gray-200 bg-white flex justify-end space-x-3">
                    <button type="button" @onclick="ClosePasskeysModal"
                           class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    <button type="button" @onclick="HandleRevokeSelectedPasskeys"
                           disabled="@(selectedPasskeyIds.Count == 0 || isRevokingPasskeys || userPasskeys.All(p => p.IsRevoked))"
                           class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        @if (isRevokingPasskeys)
                        {
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Revoking...</span>
                        }
                        else
                        {
                            <span>Revoke Selected (@selectedPasskeyIds.Count)</span>
                        }
                    </button>
                </div>
            }
        </div>
    </div>
}
