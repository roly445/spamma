<div class="flex flex-col h-full bg-white">
    @if (Email != null && _mimeMessage != null)
    {
        <!-- Header -->
        <div class="border-b border-gray-200 p-6">
            <div class="flex items-center justify-between mb-4">
                <h1 class="text-xl font-semibold text-gray-900">@_mimeMessage.Subject</h1>
                <div class="flex items-center space-x-2">
                    <button class="p-2 text-gray-400 hover:text-red-600 rounded-md hover:bg-red-50 transition-colors"
                            @onclick="DeleteEmail"
                            disabled="@_isDeleting">
                        @if (_isDeleting)
                        {
                            <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-red-600"></div>
                        }
                        else
                        {
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        }
                    </button>
                </div>
            </div>

            <!-- Email Addresses Section -->
            <div class="space-y-3">
                @if (_mimeMessage.From.Count > 0)
                {
                    <div class="flex items-start space-x-2">
                        <span class="text-sm font-medium text-gray-500 w-12">From:</span>
                        <div class="flex-1">
                            @foreach (var address in _mimeMessage.From)
                            {
                                <div class="flex items-center space-x-2 mb-1">
                                    <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                                        <span class="text-xs font-medium text-white">@GetInitials(address)</span>
                                    </div>
                                    <span class="text-sm text-gray-900">@address.ToString()</span>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (_mimeMessage.To.Count > 0)
                {
                    <div class="flex items-start space-x-2">
                        <span class="text-sm font-medium text-gray-500 w-12">To:</span>
                        <div class="flex-1">
                            @foreach (var address in _mimeMessage.To)
                            {
                                <div class="flex items-center space-x-2 mb-1">
                                    <div class="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                                        <span class="text-xs font-medium text-white">@GetInitials(address)</span>
                                    </div>
                                    <span class="text-sm text-gray-900">@address.ToString()</span>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (_mimeMessage.Cc.Count > 0)
                {
                    <div class="flex items-start space-x-2">
                        <span class="text-sm font-medium text-gray-500 w-12">Cc:</span>
                        <div class="flex-1">
                            @foreach (var address in _mimeMessage.Cc)
                            {
                                <div class="flex items-center space-x-2 mb-1">
                                    <div class="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center">
                                        <span class="text-xs font-medium text-white">@GetInitials(address)</span>
                                    </div>
                                    <span class="text-sm text-gray-900">@address.ToString()</span>
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (_mimeMessage.Bcc.Count > 0)
                {
                    <div class="flex items-start space-x-2">
                        <span class="text-sm font-medium text-gray-500 w-12">Bcc:</span>
                        <div class="flex-1">
                            @foreach (var address in _mimeMessage.Bcc)
                            {
                                <div class="flex items-center space-x-2 mb-1">
                                    <div class="w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center">
                                        <span class="text-xs font-medium text-white">@GetInitials(address)</span>
                                    </div>
                                    <span class="text-sm text-gray-900">@address.ToString()</span>
                                </div>
                            }
                        </div>
                    </div>
                }

                <div class="flex items-center space-x-2 text-sm text-gray-500">
                    <span>Date:</span>
                    <span>@_mimeMessage.Date.ToString("MMM dd, yyyy at h:mm tt")</span>
                </div>
            </div>
        </div>

        <!-- Attachments Section (if any) -->
        @if (_attachments.Count > 0)
        {
            <div class="border-b border-gray-200 p-4">
                <div class="flex items-center space-x-2 mb-3">
                    <svg class="w-5 h-5 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                    </svg>
                    <span
                        class="text-sm font-medium text-gray-700">@_attachments.Count Attachment@(_attachments.Count > 1 ? "s" : "")</span>
                </div>
                <div class="flex flex-wrap gap-2">
                    @foreach (var attachment in _attachments)
                    {
                        <div class="flex items-center space-x-2 bg-gray-50 rounded-lg p-3 border">
                            <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            <div class="flex-1 min-w-0">
                                <p class="text-sm font-medium text-gray-900 truncate">@attachment.FileName</p>
                                @* <p class="text-xs text-gray-500">@FormatFileSize(attachment.ContentObject.Content.Length)</p> *@
                                
                            </div>
                            <button class="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                    @onclick="() => DownloadAttachment(attachment)">
                                Download
                            </button>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Content Tabs -->
        <div class="flex-1 flex flex-col overflow-hidden">
            <!-- Tab Navigation -->
            <div class="border-b border-gray-200">
                <nav class="flex space-x-8 px-6" aria-label="Tabs">
                    @foreach (var tab in _tabs)
                    {
                        <button class="@GetTabClasses(tab)" @onclick="() => SetActiveTab(tab)">
                            @tab.Name
                        </button>
                    }
                </nav>
            </div>

            <!-- Responsive Toolbar (only show for HTML tab) -->
            @if (_activeTab?.Type == TabType.Html && !string.IsNullOrEmpty(_activeTab.Content))
            {
                <div class="border-b border-gray-200 bg-gray-50 px-6 py-3">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <span class="text-sm font-medium text-gray-700">Responsive Preview:</span>
                            
                            <!-- Quick Size Buttons -->
                            <div class="flex items-center space-x-2">
                                <button class="@GetViewportButtonClasses("mobile")" 
                                        @onclick="@(() => SetViewportSize(320, "Mobile"))">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M12 18h.01M8 21h8a1 1 0 001-1V4a1 1 0 00-1-1H8a1 1 0 00-1 1v16a1 1 0 001 1z"></path>
                                    </svg>
                                    Mobile
                                </button>
                                
                                <button class="@GetViewportButtonClasses("tablet")" 
                                        @onclick="@(() => SetViewportSize(768, "Tablet"))">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M12 14l9-5-9-5-9 5 9 5z M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
                                    </svg>
                                    Tablet
                                </button>
                                
                                <button class="@GetViewportButtonClasses("desktop")" 
                                        @onclick="@(() => SetViewportSize(1024, "Desktop"))">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                    </svg>
                                    Desktop
                                </button>
                                
                                <button class="@GetViewportButtonClasses("full")" 
                                        @onclick="@(() => SetViewportSize(null, "Full Width"))">
                                                                                             <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                                    </svg>
                                    Full
                                </button>
                            </div>
                        </div>
                        
                        <!-- Custom Width Input -->
                        <div class="flex items-center space-x-2">
                            <span class="text-sm text-gray-500">Custom:</span>
                            <input type="number" 
                                   @bind="_customWidth" 
                                   @onblur="ApplyCustomWidth"
                                   @onkeypress="@(async (e) => { if (e.Key == "Enter") await ApplyCustomWidth(); })"
                                   placeholder="Width" 
                                   min="240" 
                                   max="2000"
                                   class="w-20 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <span class="text-sm text-gray-500">px</span>
                            <span class="text-sm font-medium text-gray-700">(@_currentViewportName)</span>
                        </div>
                    </div>
                </div>
            }

            <!-- Tab Content -->
            <div class="flex-1 overflow-hidden">
                @if (_activeTab?.Type == TabType.Html && !string.IsNullOrEmpty(_activeTab.Content))
                {
                    <div class="h-full flex justify-center overflow-x-auto bg-gray-100 p-4">
                        <div class="@GetIframeContainerClasses()" style="@GetIframeContainerStyle()">
                            <iframe srcdoc="@_activeTab.Content"
                                    class="w-full h-full border border-gray-300 bg-white shadow-lg rounded"
                                    sandbox="allow-same-origin">
                            </iframe>
                        </div>
                    </div>
                }
                else if (_activeTab?.Type == TabType.Text)
                {
                    <div class="p-6 overflow-y-auto h-full">
                        <pre class="whitespace-pre-wrap text-sm text-gray-900 font-mono">@_activeTab.Content</pre>
                    </div>
                }
                else if (_activeTab?.Type == TabType.Raw)
                {
                    <div class="p-6 overflow-y-auto h-full bg-gray-50">
                        <pre class="whitespace-pre-wrap text-xs text-gray-800 font-mono">@_rawSource</pre>
                    </div>
                }
            </div>
        </div>

        <!-- Action Bar -->
        <div class="border-t border-gray-200 p-4">
            <div class="flex items-center space-x-2">
                <!-- Save Dropdown -->
                <div class="relative" @onblur="() => _showSaveDropdown = false">
                    <button
                        class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        @onclick="() => _showSaveDropdown = !_showSaveDropdown">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        Save Message
                        <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M19 9l-7 7-7-7"></path>
                        </svg>
                    </button>

                    @if (_showSaveDropdown)
                    {
                        <div
                            class="absolute left-0 bottom-full mb-2 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
                            <div class="py-1" role="menu">
                                <button
                                    class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                    @onclick="() => SaveMessage(SaveFormat.Eml)">
                                    <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor"
                                         viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                    </svg>
                                    Save as EML
                                    <span class="ml-auto text-xs text-gray-500">Standard email format</span>
                                </button>
                                <button
                                    class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                    @onclick="() => SaveMessage(SaveFormat.Pdf)">
                                    <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor"
                                         viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                    Save as PDF
                                    <span class="ml-auto text-xs text-gray-500">For archival</span>
                                </button>
                                <button
                                    class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                    @onclick="() => SaveMessage(SaveFormat.Html)">
                                    <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor"
                                         viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
                                    </svg>
                                    Save as HTML
                                    <span class="ml-auto text-xs text-gray-500">Web format</span>
                                </button>
                                <button
                                    class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
                                    @onclick="() => SaveMessage(SaveFormat.Text)">
                                    <svg class="w-4 h-4 mr-3 text-gray-400" fill="none" stroke="currentColor"
                                         viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M4 6h16M4 12h16M4 18h16"></path>
                                    </svg>
                                    Save as Text
                                    <span class="ml-auto text-xs text-gray-500">Plain text</span>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Loading or Empty State -->
        <div class="flex-1 flex items-center justify-center">
            <div class="text-center">
                @if (Email != null && _mimeMessage == null)
                {
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">Loading email...</h3>
                }
                else
                {
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    <h3 class="mt-2 text-sm font-medium text-gray-900">No email selected</h3>
                    <p class="mt-1 text-sm text-gray-500">Choose an email from the list to view its contents.</p>
                }
            </div>
        </div>
    }
</div>

<script>
    window.downloadFile = function (filename, base64Data, contentType = 'application/octet-stream') {
        const byteCharacters = atob(base64Data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], {type: contentType});

        const link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = filename;
        link.click();
        window.URL.revokeObjectURL(link.href);
    };

    window.printToPdf = function (htmlContent, filename) {
        // Create a new window/tab with the content
        const printWindow = window.open('', '_blank');
        printWindow.document.write(htmlContent);
        printWindow.document.close();

        // Trigger print dialog (user can choose to save as PDF)
        printWindow.focus();
        printWindow.print();

        // Close the window after a delay
        setTimeout(() => {
            printWindow.close();
        }, 1000);
    };
</script>