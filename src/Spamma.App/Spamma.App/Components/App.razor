@using Microsoft.AspNetCore.Components.Sections
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <base href="/"/>
    <link href="@Assets["app.css"]" rel="stylesheet" />
    @* <script src="https://cdn.jsdelivr.net/npm/@@tailwindcss/browser@4"></script> *@
    <ImportMap/>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <HeadOutlet @rendermode="PageRenderMode"/>
    
</head>

<body>
<Routes @rendermode="PageRenderMode"/>



<script src="_framework/blazor.web.js" autostart="false"></script>
<script>
    Blazor.start({
        webAssembly: {}
    });
</script>

<!-- Load your compiled TypeScript -->
    <script type="module" src="@Assets["app.js"]"></script>
<SectionOutlet SectionName="Scripts" />   
<script>
    window.addClickOutsideListener = (dotNetHelper) => {
        document.addEventListener('click', (event) => {
            const dropdown = event.target.closest('.relative');
            if (!dropdown) {
                dotNetHelper.invokeMethodAsync('CloseDropdown');
            }
        });
    };

    window.hideSplash = () => {
        const progress = document.getElementById('blazor-wasm-loading');
        if (!progress) return;

        // Ensure there's a transition for opacity
        if (!progress.style.transition) {
            progress.style.transition = 'opacity 300ms ease';
        }

        // Ensure starting opacity is 1
        progress.style.opacity = progress.style.opacity || '1';

        // Force reflow so the transition will run
        void progress.offsetWidth;

        const removeElement = () => {
            progress.removeEventListener('transitionend', onTransitionEnd);
            if (progress.parentNode) progress.parentNode.removeChild(progress);
        };

        const onTransitionEnd = (e) => {
            if (e.propertyName === 'opacity') removeElement();
        };

        progress.addEventListener('transitionend', onTransitionEnd);

        // Fallback in case transitionend doesn't fire
        const fallbackMs = 400;
        setTimeout(removeElement, fallbackMs);

        // Start fade
        progress.style.opacity = '0';
    }
</script>


</body>

</html>