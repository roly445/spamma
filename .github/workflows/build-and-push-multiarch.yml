name: Publish & Build Multi-Arch
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: true
        default: 'latest'

permissions:
  contents: read
  checks: write
  packages: write

jobs:
  publish:
    name: Build & Test & Publish artifacts for multiple RIDs
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        include:
          - arch: amd64
            rid: linux-x64
            runs-on: ubuntu-latest
          - arch: arm64
            rid: linux-arm64
            runs-on: [self-hosted, linux, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.arch == 'amd64'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'src/Spamma.App/Spamma.App/package-lock.json'

      - name: Install frontend dependencies
        working-directory: src/Spamma.App/Spamma.App
        run: npm ci

      - name: Build frontend
        working-directory: src/Spamma.App/Spamma.App
        run: npm run build

      - name: Setup .NET
        if: matrix.arch == 'amd64'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Clear NuGet cache
        run: dotnet nuget locals all --clear

      - name: Restore NuGet packages
        run: dotnet restore src/Spamma.App/Spamma.App/Spamma.App.csproj

      - name: Run tests (${{ matrix.arch }})
        run: |
          dotnet test \
            --configuration Release \
            --disable-build-servers \
            --logger "trx;LogFileName=test-results-${{ matrix.arch }}.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory test-results

      - name: Publish test results (${{ matrix.arch }})
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: test-results/**/*.trx
          check_name: Test Results (${{ matrix.arch }})

      - name: Publish for ${{ matrix.arch }}
        run: |
          mkdir -p publish
          dotnet publish src/Spamma.App/Spamma.App/Spamma.App.csproj -c Release --self-contained false -o publish /p:UseAppHost=false /p:SelfContainedWasm=false --disable-build-servers

      - name: Upload publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: publish-${{ matrix.arch }}
          path: publish

  docker:
    name: Build and push multi-arch image
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download publish artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts for multi-arch build
        run: |
          mkdir -p publish/linux/amd64 publish/linux/arm64
          cp -r artifacts/publish-amd64/* publish/linux/amd64/
          cp -r artifacts/publish-arm64/* publish/linux/arm64/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Spamma.App/Spamma.App/Dockerfile.runtime
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.event.inputs.tag }}
            ghcr.io/${{ github.repository }}:${{ github.event.inputs.tag }}-amd64
            ghcr.io/${{ github.repository }}:${{ github.event.inputs.tag }}-arm
