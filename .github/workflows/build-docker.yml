name: Build & Push Docker

on:
  schedule:
    - cron: '2 0 * * *'  # 2 AM UTC daily
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write
  checks: write

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate date tag (for nightly builds)
        id: date
        run: echo "tag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=nightly-${{ steps.date.outputs.tag }},enable=${{ github.event_name == 'schedule' }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Spamma.App/Spamma.App/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.date.outputs.tag }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Prepare test-results directory
        run: mkdir -p test-results

      - name: Build test stage as loadable image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/Spamma.App/Spamma.App/Dockerfile
          target: test
          load: true
          tags: spamma:test
          build-args: |
            BUILD_VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ steps.date.outputs.tag }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha

      - name: Extract test results from Docker image
        run: |
          echo "Running container to extract test results..."
          # Create a temporary container and copy files
          CONTAINER_ID=$(docker create spamma:test)
          echo "Container ID: $CONTAINER_ID"
          
          echo "Listing /test-results in container:"
          docker cp $CONTAINER_ID:/test-results . 2>/dev/null || echo "Failed to copy from /test-results"
          
          # Clean up
          docker rm $CONTAINER_ID
          
          echo "Contents of local test-results:"
          ls -la test-results/ 2>/dev/null || echo "No test-results directory"
          
          echo "Looking for .trx files:"
          find test-results -name "*.trx" -type f -exec ls -lh {} \; 2>/dev/null || echo "No .trx files found"
        shell: bash

      - name: Debug - Verify test results exist
        if: always()
        run: |
          echo "=== Test Results Directory Contents ==="
          if [ -d test-results ]; then
            find test-results -type f | head -20
            find test-results -name "*.trx" | wc -l
          else
            echo "test-results directory does not exist"
          fi
        shell: bash

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: 'test-results/**/*.trx'
          check_name: Docker Build Test Results
          compare_to_earlier_commit: false
          fail_on: 'nothing'
